
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON COMMA DECIMAL DIVIDE DO ELSE END EQUALS FLOAT GREATER ID IF INT LBRACE LBRACK LESS LPAREN MAIN MINUS NOT NUMBER PLUS PRINT PROGRAM RBRACE RBRACK RPAREN SEMICOLON STRING TIMES VAR VOID WHILEprograma : PROGRAM ID SEMICOLON dec_vars gl_vars dec_funcs MAIN body ENDgl_vars : dec_vars : vars\n                    | empty\n        dec_funcs : funcs dec_funcs\n                    | empty\n        vars : VAR variables\n        variables : list_ids COLON type SEMICOLON variables\n                    | empty\n        list_ids : ID more_ids\n        more_ids : COMMA list_ids\n                | empty\n        \n        type : INT\n            | FLOAT\n        \n        body : LBRACE statement_list RBRACE\n        \n        statement_list : statement statement_list\n            | empty\n        \n        statement : assign\n                | condition\n                | cycle\n                | f_call\n                | print\n                | while\n        \n        print : PRINT LPAREN dec_print RPAREN SEMICOLON\n        \n        dec_print : string_exp print_exp more_print\n                | expresion print_exp more_print \n        \n        string_exp : STRING \n        \n        print_exp : \n        \n        more_print : COMMA dec_print\n                | empty\n        \n        assign : ID EQUALS expresion SEMICOLON\n        \n        while : while_cycle LPAREN expresion RPAREN while_exp body SEMICOLON\n        \n        while_cycle : WHILE\n        \n        while_exp : empty \n        \n        cycle : do_cycle body WHILE LPAREN expresion RPAREN SEMICOLON\n        do_cycle : DO\n        condition : init_condition body not_condition SEMICOLON\n        \n        init_condition : IF LPAREN expresion RPAREN\n        \n        not_condition : ELSE define_jump body\n                | empty\n        \n        define_jump : empty\n        \n        expresion : exp compare_expresion\n        \n        compare_expresion : op_comp exp\n                    | empty \n        \n        exp : termino add_sub\n        \n        add_sub : op_plus_min exp\n            | empty\n        \n        op_comp : GREATER\n                | LESS\n                | NOT\n        \n        op_plus_min : PLUS\n                | MINUS\n        \n        op_times_divide : TIMES\n                | DIVIDE\n        \n        termino : factor mult_div\n        \n        mult_div : op_times_divide termino\n                | empty\n        \n        factor : LPAREN seen_lparen expresion RPAREN seen_rparen\n                | MINUS dec_num\n                | PLUS dec_num\n                | dec_num\n        seen_lparen :seen_rparen :\n        dec_num : cte\n                | ID\n        \n        cte : NUMBER\n            | DECIMAL\n        \n        funcs : VOID ID LPAREN dec_params RPAREN LBRACK dec_vars body RBRACK SEMICOLON\n        \n        dec_params : ID COLON type more_params\n                | empty\n        \n        more_params : COMMA dec_params\n                | empty\n        \n        f_call : ID LPAREN dec_expresion RPAREN SEMICOLON\n        \n        dec_expresion : expresion more_expresion\n                    | empty\n        \n        more_expresion : COMMA dec_expresion\n                    | empty\n        empty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,33,],[0,-1,]),'ID':([2,8,17,20,30,31,32,35,37,38,39,40,41,42,57,58,61,62,63,71,72,74,93,95,97,98,99,101,103,104,106,108,109,110,115,117,120,127,134,138,140,153,154,],[3,13,24,13,43,51,13,43,-18,-19,-20,-21,-22,-23,66,66,66,66,66,-62,66,66,-31,66,-48,-49,-50,66,-51,-52,66,-53,-54,66,66,-37,66,51,-73,-24,66,-35,-32,]),'SEMICOLON':([3,25,26,27,55,59,66,67,68,69,70,73,75,76,77,81,83,94,96,100,102,105,107,111,112,113,121,130,131,132,136,147,148,150,151,152,],[4,32,-13,-14,-15,-78,-65,93,-78,-78,-78,-61,-64,-66,-67,117,-40,-42,-44,-45,-47,-55,-57,-59,-60,134,138,-43,-46,-56,-39,-63,153,154,155,-58,]),'VAR':([4,92,],[8,8,]),'VOID':([4,5,6,7,8,9,10,12,15,32,54,155,],[-78,-2,-3,-4,-78,17,-7,-9,17,-78,-8,-68,]),'MAIN':([4,5,6,7,8,9,10,12,14,15,16,23,32,54,155,],[-78,-2,-3,-4,-78,-78,-7,-9,22,-78,-6,-5,-78,-8,-68,]),'LBRACE':([6,7,8,10,12,22,32,44,45,50,54,82,92,118,119,124,125,129,143,144,],[-3,-4,-78,-7,-9,30,-78,30,30,-36,-8,-78,-78,30,-41,-78,-38,30,30,-34,]),'COLON':([11,13,19,21,28,51,],[18,-78,-10,-12,-11,64,]),'COMMA':([13,26,27,66,68,69,70,73,75,76,77,79,86,87,88,91,94,96,100,102,105,107,111,112,122,123,130,131,132,147,152,],[20,-13,-14,-65,-78,-78,-78,-61,-64,-66,-67,115,-28,-28,-27,127,-42,-44,-45,-47,-55,-57,-59,-60,140,140,-43,-46,-56,-63,-58,]),'INT':([18,64,],[26,26,]),'FLOAT':([18,64,],[27,27,]),'LPAREN':([24,43,46,47,48,49,57,58,61,62,63,71,84,95,97,98,99,101,103,104,106,108,109,110,115,120,140,],[31,58,-33,61,62,63,71,71,71,71,71,-62,120,71,-48,-49,-50,71,-51,-52,71,-53,-54,71,71,71,71,]),'RPAREN':([26,27,31,52,53,58,66,68,69,70,73,75,76,77,78,79,80,85,86,87,88,89,90,91,94,96,100,102,105,107,111,112,114,115,116,122,123,126,127,128,130,131,132,133,135,137,139,141,142,145,147,149,152,],[-13,-14,-78,65,-70,-78,-65,-78,-78,-78,-61,-64,-66,-67,113,-78,-75,121,-28,-28,-27,124,125,-78,-42,-44,-45,-47,-55,-57,-59,-60,-74,-78,-77,-78,-78,-69,-78,-72,-43,-46,-56,147,-76,148,-25,-30,-26,-71,-63,-29,-58,]),'END':([29,55,],[33,-15,]),'RBRACE':([30,34,35,36,37,38,39,40,41,42,56,93,117,134,138,153,154,],[-78,55,-78,-17,-18,-19,-20,-21,-22,-23,-16,-31,-37,-73,-24,-35,-32,]),'PRINT':([30,35,37,38,39,40,41,42,93,117,134,138,153,154,],[47,47,-18,-19,-20,-21,-22,-23,-31,-37,-73,-24,-35,-32,]),'IF':([30,35,37,38,39,40,41,42,93,117,134,138,153,154,],[49,49,-18,-19,-20,-21,-22,-23,-31,-37,-73,-24,-35,-32,]),'DO':([30,35,37,38,39,40,41,42,93,117,134,138,153,154,],[50,50,-18,-19,-20,-21,-22,-23,-31,-37,-73,-24,-35,-32,]),'WHILE':([30,35,37,38,39,40,41,42,55,60,93,117,134,138,153,154,],[46,46,-18,-19,-20,-21,-22,-23,-15,84,-31,-37,-73,-24,-35,-32,]),'EQUALS':([43,],[57,]),'ELSE':([55,59,],[-15,82,]),'RBRACK':([55,146,],[-15,151,]),'MINUS':([57,58,61,62,63,66,69,70,71,73,75,76,77,95,97,98,99,101,103,104,105,106,107,108,109,110,111,112,115,120,132,140,147,152,],[72,72,72,72,72,-65,104,-78,-62,-61,-64,-66,-67,72,-48,-49,-50,72,-51,-52,-55,72,-57,-53,-54,72,-59,-60,72,72,-56,72,-63,-58,]),'PLUS':([57,58,61,62,63,66,69,70,71,73,75,76,77,95,97,98,99,101,103,104,105,106,107,108,109,110,111,112,115,120,132,140,147,152,],[74,74,74,74,74,-65,103,-78,-62,-61,-64,-66,-67,74,-48,-49,-50,74,-51,-52,-55,74,-57,-53,-54,74,-59,-60,74,74,-56,74,-63,-58,]),'NUMBER':([57,58,61,62,63,71,72,74,95,97,98,99,101,103,104,106,108,109,110,115,120,140,],[76,76,76,76,76,-62,76,76,76,-48,-49,-50,76,-51,-52,76,-53,-54,76,76,76,76,]),'DECIMAL':([57,58,61,62,63,71,72,74,95,97,98,99,101,103,104,106,108,109,110,115,120,140,],[77,77,77,77,77,-62,77,77,77,-48,-49,-50,77,-51,-52,77,-53,-54,77,77,77,77,]),'STRING':([61,140,],[88,88,]),'LBRACK':([65,],[92,]),'TIMES':([66,70,73,75,76,77,111,112,147,152,],[-65,108,-61,-64,-66,-67,-59,-60,-63,-58,]),'DIVIDE':([66,70,73,75,76,77,111,112,147,152,],[-65,109,-61,-64,-66,-67,-59,-60,-63,-58,]),'GREATER':([66,68,69,70,73,75,76,77,100,102,105,107,111,112,131,132,147,152,],[-65,97,-78,-78,-61,-64,-66,-67,-45,-47,-55,-57,-59,-60,-46,-56,-63,-58,]),'LESS':([66,68,69,70,73,75,76,77,100,102,105,107,111,112,131,132,147,152,],[-65,98,-78,-78,-61,-64,-66,-67,-45,-47,-55,-57,-59,-60,-46,-56,-63,-58,]),'NOT':([66,68,69,70,73,75,76,77,100,102,105,107,111,112,131,132,147,152,],[-65,99,-78,-78,-61,-64,-66,-67,-45,-47,-55,-57,-59,-60,-46,-56,-63,-58,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'dec_vars':([4,92,],[5,129,]),'vars':([4,92,],[6,6,]),'empty':([4,8,9,13,15,30,31,32,35,58,59,68,69,70,79,82,91,92,115,122,123,124,127,],[7,12,16,21,16,36,53,12,36,80,83,96,102,107,116,119,128,7,80,141,141,144,53,]),'gl_vars':([5,],[9,]),'variables':([8,32,],[10,54,]),'list_ids':([8,20,32,],[11,28,11,]),'dec_funcs':([9,15,],[14,23,]),'funcs':([9,15,],[15,15,]),'more_ids':([13,],[19,]),'type':([18,64,],[25,91,]),'body':([22,44,45,118,129,143,],[29,59,60,136,146,150,]),'statement_list':([30,35,],[34,56,]),'statement':([30,35,],[35,35,]),'assign':([30,35,],[37,37,]),'condition':([30,35,],[38,38,]),'cycle':([30,35,],[39,39,]),'f_call':([30,35,],[40,40,]),'print':([30,35,],[41,41,]),'while':([30,35,],[42,42,]),'init_condition':([30,35,],[44,44,]),'do_cycle':([30,35,],[45,45,]),'while_cycle':([30,35,],[48,48,]),'dec_params':([31,127,],[52,145,]),'expresion':([57,58,61,62,63,110,115,120,140,],[67,79,87,89,90,133,79,137,87,]),'exp':([57,58,61,62,63,95,101,110,115,120,140,],[68,68,68,68,68,130,131,68,68,68,68,]),'termino':([57,58,61,62,63,95,101,106,110,115,120,140,],[69,69,69,69,69,69,69,132,69,69,69,69,]),'factor':([57,58,61,62,63,95,101,106,110,115,120,140,],[70,70,70,70,70,70,70,70,70,70,70,70,]),'dec_num':([57,58,61,62,63,72,74,95,101,106,110,115,120,140,],[73,73,73,73,73,111,112,73,73,73,73,73,73,73,]),'cte':([57,58,61,62,63,72,74,95,101,106,110,115,120,140,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'dec_expresion':([58,115,],[78,135,]),'not_condition':([59,],[81,]),'dec_print':([61,140,],[85,149,]),'string_exp':([61,140,],[86,86,]),'compare_expresion':([68,],[94,]),'op_comp':([68,],[95,]),'add_sub':([69,],[100,]),'op_plus_min':([69,],[101,]),'mult_div':([70,],[105,]),'op_times_divide':([70,],[106,]),'seen_lparen':([71,],[110,]),'more_expresion':([79,],[114,]),'define_jump':([82,],[118,]),'print_exp':([86,87,],[122,123,]),'more_params':([91,],[126,]),'more_print':([122,123,],[139,142,]),'while_exp':([124,],[143,]),'seen_rparen':([147,],[152,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM ID SEMICOLON dec_vars gl_vars dec_funcs MAIN body END','programa',9,'p_programa','parser.py',81),
  ('gl_vars -> <empty>','gl_vars',0,'p_gl_vars','parser.py',86),
  ('dec_vars -> vars','dec_vars',1,'p_dec_vars','parser.py',94),
  ('dec_vars -> empty','dec_vars',1,'p_dec_vars','parser.py',95),
  ('dec_funcs -> funcs dec_funcs','dec_funcs',2,'p_dec_funcs','parser.py',100),
  ('dec_funcs -> empty','dec_funcs',1,'p_dec_funcs','parser.py',101),
  ('vars -> VAR variables','vars',2,'p_vars','parser.py',111),
  ('variables -> list_ids COLON type SEMICOLON variables','variables',5,'p_variables','parser.py',117),
  ('variables -> empty','variables',1,'p_variables','parser.py',118),
  ('list_ids -> ID more_ids','list_ids',2,'p_list_ids','parser.py',125),
  ('more_ids -> COMMA list_ids','more_ids',2,'p_more_ids','parser.py',135),
  ('more_ids -> empty','more_ids',1,'p_more_ids','parser.py',136),
  ('type -> INT','type',1,'p_type','parser.py',163),
  ('type -> FLOAT','type',1,'p_type','parser.py',164),
  ('body -> LBRACE statement_list RBRACE','body',3,'p_body','parser.py',174),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','parser.py',180),
  ('statement_list -> empty','statement_list',1,'p_statement_list','parser.py',181),
  ('statement -> assign','statement',1,'p_statement','parser.py',193),
  ('statement -> condition','statement',1,'p_statement','parser.py',194),
  ('statement -> cycle','statement',1,'p_statement','parser.py',195),
  ('statement -> f_call','statement',1,'p_statement','parser.py',196),
  ('statement -> print','statement',1,'p_statement','parser.py',197),
  ('statement -> while','statement',1,'p_statement','parser.py',198),
  ('print -> PRINT LPAREN dec_print RPAREN SEMICOLON','print',5,'p_print','parser.py',208),
  ('dec_print -> string_exp print_exp more_print','dec_print',3,'p_dec_print','parser.py',214),
  ('dec_print -> expresion print_exp more_print','dec_print',3,'p_dec_print','parser.py',215),
  ('string_exp -> STRING','string_exp',1,'p_string_exp','parser.py',224),
  ('print_exp -> <empty>','print_exp',0,'p_print_exp','parser.py',235),
  ('more_print -> COMMA dec_print','more_print',2,'p_more_print','parser.py',243),
  ('more_print -> empty','more_print',1,'p_more_print','parser.py',244),
  ('assign -> ID EQUALS expresion SEMICOLON','assign',4,'p_assign','parser.py',273),
  ('while -> while_cycle LPAREN expresion RPAREN while_exp body SEMICOLON','while',7,'p_while','parser.py',301),
  ('while_cycle -> WHILE','while_cycle',1,'p_while_cycle','parser.py',317),
  ('while_exp -> empty','while_exp',1,'p_while_exp','parser.py',324),
  ('cycle -> do_cycle body WHILE LPAREN expresion RPAREN SEMICOLON','cycle',7,'p_cycle','parser.py',345),
  ('do_cycle -> DO','do_cycle',1,'p_cycle_start','parser.py',363),
  ('condition -> init_condition body not_condition SEMICOLON','condition',4,'p_condition','parser.py',369),
  ('init_condition -> IF LPAREN expresion RPAREN','init_condition',4,'p_init_condition','parser.py',380),
  ('not_condition -> ELSE define_jump body','not_condition',3,'p_not_condition','parser.py',398),
  ('not_condition -> empty','not_condition',1,'p_not_condition','parser.py',399),
  ('define_jump -> empty','define_jump',1,'p_define_jump','parser.py',406),
  ('expresion -> exp compare_expresion','expresion',2,'p_expresion','parser.py',419),
  ('compare_expresion -> op_comp exp','compare_expresion',2,'p_compare_expresion','parser.py',430),
  ('compare_expresion -> empty','compare_expresion',1,'p_compare_expresion','parser.py',431),
  ('exp -> termino add_sub','exp',2,'p_exp','parser.py',441),
  ('add_sub -> op_plus_min exp','add_sub',2,'p_add_sub','parser.py',453),
  ('add_sub -> empty','add_sub',1,'p_add_sub','parser.py',454),
  ('op_comp -> GREATER','op_comp',1,'p_op_comp','parser.py',462),
  ('op_comp -> LESS','op_comp',1,'p_op_comp','parser.py',463),
  ('op_comp -> NOT','op_comp',1,'p_op_comp','parser.py',464),
  ('op_plus_min -> PLUS','op_plus_min',1,'p_op_plus_min','parser.py',472),
  ('op_plus_min -> MINUS','op_plus_min',1,'p_op_plus_min','parser.py',473),
  ('op_times_divide -> TIMES','op_times_divide',1,'p_op_times_divide','parser.py',481),
  ('op_times_divide -> DIVIDE','op_times_divide',1,'p_op_times_divide','parser.py',482),
  ('termino -> factor mult_div','termino',2,'p_termino','parser.py',515),
  ('mult_div -> op_times_divide termino','mult_div',2,'p_mult_div','parser.py',528),
  ('mult_div -> empty','mult_div',1,'p_mult_div','parser.py',529),
  ('factor -> LPAREN seen_lparen expresion RPAREN seen_rparen','factor',5,'p_factor','parser.py',538),
  ('factor -> MINUS dec_num','factor',2,'p_factor','parser.py',539),
  ('factor -> PLUS dec_num','factor',2,'p_factor','parser.py',540),
  ('factor -> dec_num','factor',1,'p_factor','parser.py',541),
  ('seen_lparen -> <empty>','seen_lparen',0,'p_seen_lparen','parser.py',560),
  ('seen_rparen -> <empty>','seen_rparen',0,'p_seen_rparen','parser.py',564),
  ('dec_num -> cte','dec_num',1,'p_dec_num','parser.py',571),
  ('dec_num -> ID','dec_num',1,'p_dec_num','parser.py',572),
  ('cte -> NUMBER','cte',1,'p_cte','parser.py',589),
  ('cte -> DECIMAL','cte',1,'p_cte','parser.py',590),
  ('funcs -> VOID ID LPAREN dec_params RPAREN LBRACK dec_vars body RBRACK SEMICOLON','funcs',10,'p_funcs','parser.py',609),
  ('dec_params -> ID COLON type more_params','dec_params',4,'p_dec_params','parser.py',622),
  ('dec_params -> empty','dec_params',1,'p_dec_params','parser.py',623),
  ('more_params -> COMMA dec_params','more_params',2,'p_more_params','parser.py',633),
  ('more_params -> empty','more_params',1,'p_more_params','parser.py',634),
  ('f_call -> ID LPAREN dec_expresion RPAREN SEMICOLON','f_call',5,'p_f_call','parser.py',642),
  ('dec_expresion -> expresion more_expresion','dec_expresion',2,'p_dec_expresion','parser.py',651),
  ('dec_expresion -> empty','dec_expresion',1,'p_dec_expresion','parser.py',652),
  ('more_expresion -> COMMA dec_expresion','more_expresion',2,'p_more_expresion','parser.py',659),
  ('more_expresion -> empty','more_expresion',1,'p_more_expresion','parser.py',660),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',666),
]
